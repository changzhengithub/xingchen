(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{410:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git开发规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git开发规范"}},[t._v("#")]),t._v(" Git开发规范")]),t._v(" "),s("p",[t._v("团队多人协作开发一个项目，最重要的就是版本控制，一个合理的版本控制规范可以让成员之间高效率的协作开发，稳定的迭代版本。习惯使用版本控制工具，对以后不论在哪个团队都能更快的融入开发中。")]),t._v(" "),s("h2",{attrs:{id:"分支规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支规范"}},[t._v("#")]),t._v(" 分支规范")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("master分支")]),t._v(" 生成环境分支，作为线上正式版本发布分支，每次正式发布打tag标记版本，如有重大bug标记为小版本发布，任何开发测试内容不允许直接提交到此分支。")]),t._v(" "),s("li",[s("strong",[t._v("fix分支")]),t._v(" bug分支，生产环境出现bug，创建此分支拉取最新代码修复bug，然后在提交到release分支进行测试，然后再推送到master发布，并同步到开发分支。")]),t._v(" "),s("li",[s("strong",[t._v("release分支")]),t._v(" 测试环境分支，作为测试环境发布分支，开发完后统一提交到此分支，同正式版本同步打版本。")]),t._v(" "),s("li",[s("strong",[t._v("dev分支")]),t._v(" 开发环境分支，永远保持最新的开发代码供成员进行同步，开发完成后推送到release分支进行测试。禁止推送未开发完成的功能。")]),t._v(" "),s("li",[s("strong",[t._v("dev_分支")]),t._v(" 成员自己的开发分支，只允许此分支提交到dev分支，禁止其他功能分支提交到dev。")])]),t._v(" "),s("p",[t._v("开发时基于dev创建自己的开发分支dev_xx，此分支只能作为成员的提交分支，所有开发完成的代码提交到此分支后再提交到dev，不能用多个分支进行提交到dev。成员最好每天都拉取和提交最新的开发完成的代码，以减少代码冲突。合并代码时禁止在本地直接合并到远程分支。")]),t._v(" "),s("p",[t._v("我们规定，主分支master只能用于线上发布，只允许发布时从release分支进行提交合并，除了解决线上bug分支外，其他开发分支禁止直接合并到主分支上，release分支只能从dev分支进行提交，其他开发分支禁止提交。并且不允许开发人员有合并权限，只能管理员才能进行合并。")]),t._v(" "),s("p",[t._v("对于dev分支，也只允许开发人员自己的分支进行提交合并，不允许成员自己创建的其他本地分支进行合并，防止污染其他分支。当然，于于项目管控严一点的，dev也不允许开发分支有直接合并权限，在对代码进行审核后才能进行合并，也是防止污染测试环境，当然这需要整个研发团队有着完整的规范和约束执行力。")]),t._v(" "),s("h2",{attrs:{id:"commit提交规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit提交规范"}},[t._v("#")]),t._v(" commit提交规范")]),t._v(" "),s("p",[t._v("每次commit提交代码时我们都是要描述清楚本次修改了什么，并且有专门的提交格式，这里我们推荐使用 type: description 格式进行提交。")]),t._v(" "),s("p",[t._v("type 是 commit 的类别，只允许如下几种标识：")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("feat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("新功能\nfix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("修复bug\nto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("多次修复bug\nupdate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("更新\nrefactor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("重构（即不是新增功能，也不是修改bug的代码变动）\nstyle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("代码格式改变\nmerge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("代码合并\ndocs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("文档\nrevert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("撤销\ntest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("增加测试代码\nbuild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("构建工具或构建过程等的变动\nperf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("性能优化\n")])])]),s("p",[t._v("description 是对本次提交的简短描述，推荐以动词开头，如： 设置、修改、增加、删减、撤销")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("git commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("am "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat:新增用户模块"')]),t._v("\ngit commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("am "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"style:修改某某样式"')]),t._v("\n")])])]),s("h2",{attrs:{id:"多人协作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多人协作"}},[t._v("#")]),t._v(" 多人协作")]),t._v(" "),s("p",[t._v("现在我们开始基于创建好master和dev分支的项目进行团队开发，假如有团队成员A和B。")]),t._v(" "),s("p",[t._v("A和B领到任务后，分别在自己电脑拉取代码进行开发。")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("git clone "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 克隆项目")]),t._v("\n")])])]),s("p",[t._v("这时查看我们拉下来的项目，发现本地只有master分支。")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" master\n  remotes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("origin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("master\n  remotes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("origin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("dev\n")])])]),s("p",[t._v("这时我们要根据远程dev分支创建本地分支，不能直接从本地创建，要不然会造成本地和远程不同步。")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("git checkout remotes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("origin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("dev\ngit checkout dev "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 创建本地dev关联远程dev分支\ngit checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b dev_test "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 创建本地开发分支dev_test\n")])])]),s("p",[t._v("每次在开发前或者代码合并前都需要先拉一下远程dev分支进行merge解决冲突。")]),t._v(" "),s("p",[t._v("当各自的任务开发完成后，就可以把代码提交到远程，然后打包测试。")]),t._v(" "),s("p",[t._v("我们在每次提交代码到远程时，都要先拉取最新的dev分支，进行代码对比，没有冲突后才能提交到自己的远程分支。")]),t._v(" "),s("p",[t._v("A同学：")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("git add "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\ngit commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("am "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat:新增某某模块"')]),t._v("\ngit pull origin dev "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取远程，解决冲突")]),t._v("\ngit push origin dev_a "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推到自己的远程分支")]),t._v("\n")])])]),s("p",[t._v("A同学提交到远程后，把代码合并到dev分支后B再提交进行合并，这里合并远程分支可以在远程仓库上进行合并，也可以本地使用merge进行远程分支合并。\nB同学：")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("git add "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\ngit commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("am "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat:新增某某模块"')]),t._v("\ngit pull origin dev "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取远程，解决冲突")]),t._v("\ngit push origin dev_b "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推到自己的远程分支")]),t._v("\n")])])]),s("p",[t._v("当两个人开发完成后把代码合并都合并到dev远程，dev上就是最新的代码，这时切到dev拉取最新代码，打包发布测试版本，进行测试，测试完成后，把dev合并到master分支，然后基于master分支发布版本。")]),t._v(" "),s("h2",{attrs:{id:"线上bug修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线上bug修改"}},[t._v("#")]),t._v(" 线上bug修改")]),t._v(" "),s("p",[t._v("当线上出现bug，如果是重大bug无法立即修复，则直接回滚版本，代码回滚到上一个正式版本，先恢复线上正常访问，然后再慢慢排查问题，等到问题排查出后再测试打包发版上线。")]),t._v(" "),s("p",[t._v("如果是线上出现某些不会影响正常使用的bug，需要立即解决，我们就需要在主分支上直接创建bug分支进行修改，然后合并到主分支测试打包发布bug版本。")]),t._v(" "),s("p",[t._v("发布好后，我们开发分支也要同步该代码，一级一级的去同步远程版本，否则我们开发分支就无法和主分支保持版本同步，导致无法提交。")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("git checkout master\n\ngit pull origin master\n\ngit checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b fix_bug "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建bug分支")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\ngit push origin fix_bug "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解决问题提交远程合并到主分支")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同步其他分支代码")]),t._v("\n\ngit checkout dev\n\ngit pull origin master "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取bug修改后的版本")]),t._v("\n\ngit push origin dev "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dev分支保持同步")]),t._v("\n\ngit checkout dev_cz\n\ngit pull origin dev "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 现在开发分支就是同步了最新版本")]),t._v("\n\ngit push origin dev_cz\n")])])]),s("h2",{attrs:{id:"版本发布流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本发布流程"}},[t._v("#")]),t._v(" 版本发布流程")]),t._v(" "),s("p",[t._v("代码开发完成合并到master分支，我们要发布版本所对应的更新信息和代码包，一般都是借助git工具的 releases 功能进行发布。")]),t._v(" "),s("p",[t._v("进入仓库，左侧项目概述点击发布")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/guide/image01.png",alt:"图片"}})]),t._v(" "),s("p",[t._v("点击发布，新建发布，填写发布信息")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/guide/image02.png",alt:"图片"}})]),t._v(" "),s("p",[t._v("更多："),s("a",{attrs:{href:"https://shimo.im/docs/vVAXV6w2GaUGlyqm",target:"_blank",rel:"noopener noreferrer"}},[t._v("git使用教程"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);